<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>爆破</title>
    <link href="/2025/02/04/%E7%88%86%E7%A0%B4/"/>
    <url>/2025/02/04/%E7%88%86%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><h2 id="一、Burp-Suite"><a href="#一、Burp-Suite" class="headerlink" title="一、Burp Suite"></a>一、Burp Suite</h2><p>众所周知，BurpSuite是渗透测试最基本的工具，也可是神器，该神器有非常之多的模块；需要我们去一 一积累，掌握BurpSuite的使用方法，它的工作原理是：Intruder在原始请求数据的基础上，通过修改各种请求参数，以获取不同的请求应答。每一次请求中，Intruder通常会携带一个或多个有效攻击载荷（Payload),在不同的位置进行攻击重放，通过应答数据的比对分析来获得需要的特征数据。</p><p>当我们遇到需要进行爆破时我们可以使用burp suite抓包，右键将其发送到Intruder模块。<img src="/2025/02/04/%E7%88%86%E7%A0%B4/4d3b6a4a97102cdac246a152c51ccd7.png" class="" title="4d3b6a4a97102cdac246a152c51ccd7"></p><p>我们可以在请求里找到要爆破的部分添加payload位置。</p><img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204142318220.png" class="" title="image-20250204142318220"><p>同时，我们有多种爆破类型，可以根据需求进行选择。</p><img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204142459437.png" class="" title="image-20250204142459437"><p>然后点击payload，对爆破内容进行编辑与设置。我们可以在payload sets中找到我们需要的方式来完成我们的期望。<img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204143153808.png" class="" title="image-20250204143153808"></p><p>以下根据题目讲解一些常用的payload类型。</p><h3 id="Ⅰ、自定义迭代器（custom-iterator）"><a href="#Ⅰ、自定义迭代器（custom-iterator）" class="headerlink" title="Ⅰ、自定义迭代器（custom iterator）"></a>Ⅰ、自定义迭代器（custom iterator）</h3><p>当我们选择了自定义迭代器时，就会出现以下的项目。可以通过对不同位置的填写来组成payload。</p><p>如：位置1&#x3D;好，位置2&#x3D;厉，位置3&#x3D;害–&gt;好厉害。</p><img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204143758509.png" class="" title="image-20250204143758509"><p>比如根据这道题，我们通过解码发现密码的形式为<strong>用户名：密码</strong>的形式组成。<img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204144334604.png" class="" title="image-20250204144334604"></p><p>我们可以通过这样↓来构建payload，然后开始爆破。</p><img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204151228089.png" class="" title="image-20250204151228089"><img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204151254167.png" class="" title="image-20250204151254167"><img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204151309080.png" class="" title="image-20250204151309080"><h3 id="payload的处理（payload-processing）"><a href="#payload的处理（payload-processing）" class="headerlink" title="payload的处理（payload processing）"></a>payload的处理（payload processing）</h3><p>可以通过payload处理模块对payload进行处理。</p><img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204152845504.png" class="" title="image-20250204152845504"><p>处理方式有以下几种。</p><img src="/2025/02/04/%E7%88%86%E7%A0%B4/image-20250204153457015.png" class="" title="image-20250204153457015"><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><p>在有些爆破题中会考察我们对语言的熟练度，我们需要通过编写将<strong>结果</strong>爆破出来（个人感觉超级麻烦），但是这是一个绕不过的部分，还需要我们耐心的去学习，以下以题为例来展开。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">\# -*- coding: utf-8 -*-</span><br><span class="hljs-comment">\# <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment">\# <span class="hljs-doctag">@Date</span>:  2020-09-03 11:43:51</span><br><span class="hljs-comment">\# <span class="hljs-doctag">@Last</span> Modified by:  h1xa</span><br><span class="hljs-comment">\# <span class="hljs-doctag">@Last</span> Modified time: 2020-09-03 11:56:11</span><br><span class="hljs-comment">\# <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment">\# <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;token&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$token</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;token&#x27;</span>]);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) ===<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))&#123;<br>    <span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))+<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>))+<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))/<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">31</span>,<span class="hljs-number">1</span>)))&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>  &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <span class="hljs-comment">//substr（string $string, int $start, ?int $length = null）的作用是截取字符串。</span><br>    <span class="hljs-comment">//$length：可选，指定要截取的字符串长度。如果省略该参数，则截取从起始位置到字符串末尾的所有字符；如果为正数，则截取指定长度的字符；如果为负数，则表示从字符串末尾开始排除指定数量的字符。</span><br>   <br>    <span class="hljs-comment">//intval(mixed $value, ?int $base = 10): int的作用是将变量转换成整数。</span><br>    <span class="hljs-comment">//$base：可选，指定转换时使用的进制，默认值为 10，表示十进制。如果 $value 是字符串，且以 0x 开头，intval 会将其视为十六进制数进行转换；若指定了其他进制，会按照相应进制规则进行转换。</span><br></code></pre></td></tr></table></figure><p>通过以上代码我们可以了解到：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">GET型传入一个<span class="hljs-built_in">token</span>参数 <br>对<span class="hljs-built_in">token</span>进行md5加密<br><span class="hljs-built_in">token</span>的第二位=第十五位=第十八位<br><span class="hljs-built_in">token</span>的第二位+第十五位+第十八位/第二位=第三十二位<br></code></pre></td></tr></table></figure><p><strong>在写代码时许注意md5函数要求传入的参数是字符串类型。如果传入的是整数类型的数据，PHP会尝试将其自动转换为字符串</strong></p><p>以下为构建的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 开始遍历可能的 token 值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">1000000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-variable">$token</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-variable">$i</span>);<br>    <span class="hljs-comment">// 计算 MD5 哈希值</span><br>    <span class="hljs-variable">$md5Hash</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$token</span>);<br>    <br>    <span class="hljs-comment">// 检查满足第一个条件</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5Hash</span>[<span class="hljs-number">1</span>] === <span class="hljs-variable">$md5Hash</span>[<span class="hljs-number">14</span>] &amp;&amp; <span class="hljs-variable">$md5Hash</span>[<span class="hljs-number">14</span>] === <span class="hljs-variable">$md5Hash</span>[<span class="hljs-number">17</span>]) &#123;<br>        <span class="hljs-comment">// 尝试将字符转换为整数</span><br>        <span class="hljs-variable">$num1</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$md5Hash</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$num2</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$md5Hash</span>[<span class="hljs-number">31</span>]);<br><br>        <span class="hljs-comment">// 避免除零错误</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$num1</span> != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 检查第二个条件是否满足</span><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$num1</span> + <span class="hljs-variable">$num1</span> + <span class="hljs-variable">$num1</span>) / <span class="hljs-variable">$num1</span> === <span class="hljs-variable">$num2</span>) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$token</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$md5Hash</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以得到结果token&#x3D;422，然后得到flag。</p><p>我们再看一题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-03 13:26:39</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-03 13:53:31</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$r</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">372619038</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$r</span>)===<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">mt_rand</span>()))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /proc/version&#x27;</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//Linux version 5.4.0-163-generic (buildd@lcy02-amd64-067) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #180-Ubuntu SMP Tue Sep 5 13:21:23 UTC 2023 Linux version 5.4.0-163-generic (buildd@lcy02-amd64-067) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #180-Ubuntu SMP Tue Sep 5 13:21:23 UTC 2023</span><br></code></pre></td></tr></table></figure><p>关于这一题，我们需要了解<code>mt_srand()</code>函数和<code>mt_rand()</code>函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mt_srand</span><span class="hljs-params">()</span></span>函数用于播种 Mersenne Twister 随机数生成器。播种的作用是为随机数生成器设置一个起始值（种子），不同的种子会导致生成不同的随机数序列。如果不手动播种，PHP 会自动使用系统时间作为种子。<br><br><span class="hljs-function"><span class="hljs-title">mt_srand</span><span class="hljs-params">(int <span class="hljs-variable">$seed</span> = null, int <span class="hljs-variable">$mode</span> = MT_RAND_MT19937)</span></span>: void<br><span class="hljs-variable">$seed</span>：可选参数，用于指定种子的整数值。如果省略该参数，PHP 会使用系统时间作为种子。<br><span class="hljs-variable">$mode</span>：可选参数，指定随机数生成的模式，从 PHP <span class="hljs-number">7.1</span>.<span class="hljs-number">0</span> 开始支持，默认值为MT_RAND_MT19937。<br><br>该函数没有返回值，返回类型为void。<br><br><span class="hljs-function"><span class="hljs-title">mt_rand</span><span class="hljs-params">()</span></span>函数用于生成一个 Mersenne Twister 算法的随机整数。<br><br><span class="hljs-function"><span class="hljs-title">mt_rand</span><span class="hljs-params">()</span></span>: int<br><span class="hljs-function"><span class="hljs-title">mt_rand</span><span class="hljs-params">(int <span class="hljs-variable">$min</span>, int <span class="hljs-variable">$max</span>)</span></span>: int<br>如果不提供任何参数，<span class="hljs-built_in">mt_rand</span>()会返回一个介于<span class="hljs-number">0</span>到<span class="hljs-built_in">mt_getrandmax</span>()之间的随机整数。<br><br>mt_getrandmax () 是 PHP 中的一个函数，用于返回通过 Mersenne Twister 随机数生成器产生的随机数的最大可能值。例如，在生成随机数时可以通过这个函数了解随机数的取值范围上限。<br><br>如果提供两个参数<span class="hljs-variable">$min</span>和<span class="hljs-variable">$max</span>，<span class="hljs-built_in">mt_rand</span>()会返回一个介于<span class="hljs-variable">$min</span>和<span class="hljs-variable">$max</span>之间（包括<span class="hljs-variable">$min</span>和<span class="hljs-variable">$max</span>）的随机整数。<br><br>返回一个随机整数值。<br></code></pre></td></tr></table></figure><p>根据分析我们可以知道当r&#x3D;1155388967时得到flag</p><h3 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h3><p>在php中每一次调用mt_rand()函数，都会检查一下系统有没有播种。（播种为mt_srand()函数完成），当随机种子生成后，后面生成的随机数都会根据这个随机种子生成。所以同一个种子下，随机数的序列是相同的，这就是漏洞点。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">372619038</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>();<br>&gt;<br><span class="hljs-comment">//1155388967</span><br><span class="hljs-comment">//125197722   每次结果都是一样的</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>();<br>&gt;<br><span class="hljs-comment">//772294827</span><br><span class="hljs-comment">//1908538618</span><br><br><span class="hljs-comment">//1349368901</span><br><span class="hljs-comment">//77594822    结果不一</span><br></code></pre></td></tr></table></figure><p>总之，关于代码爆破的使用需要我们的语言基础，所以我们应该多加练习，从而掌握代码爆破。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于信息收集的心得</title>
    <link href="/2025/01/25/%E5%85%B3%E4%BA%8E%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%9A%84%E5%BF%83%E5%BE%97/"/>
    <url>/2025/01/25/%E5%85%B3%E4%BA%8E%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%9A%84%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集的心得"><a href="#信息收集的心得" class="headerlink" title="信息收集的心得"></a>信息收集的心得</h1><p>信息收集的大部分题目比较简单，不需要太高的技术水平，只需要有仔细、大胆、脑洞即可。</p><h1 id="几个方向的思路"><a href="#几个方向的思路" class="headerlink" title="几个方向的思路"></a>几个方向的思路</h1><h3 id="一、查看源代码"><a href="#一、查看源代码" class="headerlink" title="一、查看源代码"></a>一、查看源代码</h3><p>在简单的题目中会有这些会有这样的解法，有时网站会禁止使用某个方式，需要掌握多种查看方法。</p><p>查看源代码的方式有：</p><ol><li>ctrl+u</li><li>右键</li><li>使用Burp suite抓包</li></ol><h3 id="二、抓包看响应"><a href="#二、抓包看响应" class="headerlink" title="二、抓包看响应"></a>二、抓包看响应</h3><p>有些信息会藏在<strong>响应Cookies</strong>里，或者直接就能看到。</p><h3 id="三、disearch工具扫描"><a href="#三、disearch工具扫描" class="headerlink" title="三、disearch工具扫描"></a>三、disearch工具扫描</h3><p>可以通过<strong>disearch</strong>工具对网站进行扫描，Dirsearch是一个基于Python的命令行工具，主要用于<strong>暴力扫描Web服务器的目录和文件</strong>。这个工具可以帮助渗透测试人员发现网站的隐藏目录，这些目录可能包含敏感信息或潜在的攻击媒介。Dirsearch通过自定义字典进行扫描，支持多线程，使得扫描过程快速高效。</p><p>在扫描过后找到敏感文件，比如：robots.txt，index.phps，.git等。</p><h3 id="四、在网页中寻找"><a href="#四、在网页中寻找" class="headerlink" title="四、在网页中寻找"></a>四、在网页中寻找</h3><p>在信息收集中网页中可能潜藏信息，比如ctfshow中web13中<img src="/2025/01/25/%E5%85%B3%E4%BA%8E%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%9A%84%E5%BF%83%E5%BE%97/1737794450986.png" class="" width="1737794450986"></p><p>敏感信息，解题关键就在这儿。<strong>（耐心去找，才有可能找到）！！！</strong></p><h3 id="五、目录"><a href="#五、目录" class="headerlink" title="五、目录"></a>五、目录</h3><p>通过在网站的源目录里找到flag</p><h3 id="六、PHP探针"><a href="#六、PHP探针" class="headerlink" title="六、PHP探针"></a>六、PHP探针</h3><p>PHP探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 </p><p>PHP探针是测试用的，但是探针漏洞类型的题目中可以使用。</p><p>通过探针可以获取许多信息。</p><p>探针通常为 tz.php。</p><h3 id="七、游戏"><a href="#七、游戏" class="headerlink" title="七、游戏"></a>七、游戏</h3><p>在是小游戏的信息收集中源代码里往往藏着游戏胜利的条件，只需要在源代码里寻找即可。</p><h3 id="八、asp-access构建的数据库"><a href="#八、asp-access构建的数据库" class="headerlink" title="八、asp+access构建的数据库"></a>八、asp+access构建的数据库</h3><p>.mdb文件是早期Access数据库的文件（2003版）  还有.accdb（2007版）。</p><p>MDB 文件包含数据库查询、表等，可用于链接和存储来自其他文件（如 XML 和 HTML）以及应用程序（如 <a href="https://cn.windows.day/?cat=excel">Excel</a> 和 SharePoint）的数据。 LDB 文件有时与 Access 数据库文件位于同一文件夹中；它是一个临时存储在共享数据库中的 Access <em>锁定</em>文件。</p><p>可以通过访问.mdb文件</p><p>也可以通过多次dirsearch扫描，找到文件。</p><p>如遇到其他方法还会添加。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nmap的使用方法</title>
    <link href="/2025/01/21/nmap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2025/01/21/nmap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h1><h2 id="一、功能"><a href="#一、功能" class="headerlink" title="一、功能:"></a>一、功能:</h2><ol><li>主机发现</li><li>端口扫描</li><li>版本侦测</li><li>OS侦测</li><li>漏洞扫描</li></ol><h2 id="二、功能解析"><a href="#二、功能解析" class="headerlink" title="二、功能解析"></a>二、功能解析</h2><h3 id="Ⅰ、主机发现"><a href="#Ⅰ、主机发现" class="headerlink" title="Ⅰ、主机发现"></a>Ⅰ、主机发现</h3><p>主机发现的命令原理和ping差不多，但不仅仅局限于ping。如果收到回复，则证明主机是打开的，nmap可以使用多种方法来证明主机是否启动，可以防止单一方法被防护墙隔断，如windows系统的防火墙。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -sP  ip#单个主机<br>nmap -sP ip,ip#多个主机使用逗号隔开<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">解析：<br>Host <span class="hljs-keyword">is</span> <span class="hljs-keyword">up</span>表示主机存活<br>MAC Address为物理地址<br></code></pre></td></tr></table></figure><p><strong>一个范围的主机</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -sP ip<br></code></pre></td></tr></table></figure><p><strong>服务版本探测</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -sV ip<br></code></pre></td></tr></table></figure><p><strong>扫描目标主机操作系统版本</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -O ip<br></code></pre></td></tr></table></figure><p><strong>全面扫描</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -A ip<br></code></pre></td></tr></table></figure><h3 id="Ⅱ、端口扫描"><a href="#Ⅱ、端口扫描" class="headerlink" title="Ⅱ、端口扫描"></a>Ⅱ、端口扫描</h3><p>端口扫描是Nmap的关键功能，用于确定目标主机的TCP&#x2F;UDP端口的开放情况。</p><p>状态：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">open:端口是开放的。</span><br><span class="hljs-section">closed:端口是关闭的。 </span><br><span class="hljs-section">filtered:端口被防火墙或IDS/IPS屏蔽，无法确定其状态。</span><br><span class="hljs-section">unfiltered:端口没有被屏被，但是否开放需要进一步确定。 </span><br><span class="hljs-section">open|filtered:端口是开放的或被屏蔽。 </span><br><span class="hljs-section">closed|filtered:端口是关闭的或被屏敲。</span><br></code></pre></td></tr></table></figure><h3 id="Ⅲ、版本侦测"><a href="#Ⅲ、版本侦测" class="headerlink" title="Ⅲ、版本侦测"></a>Ⅲ、版本侦测</h3><p>版本侦测主要分为以下几个步骤： </p><p>1,首先检查open与open|filtered状态的端口是否在排除端口列表内。如果在排除列表，将该端口别除，</p><p>2.如果是TcP端口，尝试建立TCP连接。尝试等待片刻（通常6秒或更多，具体时间可以查询文件nmap-services-probes中Probe TCP NULL q|对应的totalwaitms)。通常在等待时间内，会接收到目标机发送的“WelcomeBanner”信息。nmap将接收到的Banner与nmap-services- probes中NULL probe中的签名进行对比。查找对应应用程序的名字与版本信息。 </p><p>3.如果通过“Welcome Banner”无法确定应用程序版本，那么nmap再尝试发送其他的探测包（即从nmap-services-probes中挑选合适的probe),将probe得到回复包与数据库中的签名进行对比。如果反复探测都无法得出具体应用，那么打印出应用返回报文，让用户自行进一步判定。 </p><p>4,如果是UDP端口，那么直接使用nmap-services-probes中探测包进行探测匹配。根据结果对比分析出UDP应用服务类型。 </p><p>5,如果探测到应用程序是sSL,那么调用openSSL进一步的侦查运行在SSL之上的具体的应用类型。 </p><p>6.如果探测到应用程序是SunRPC,那么调用orute-force RPC grinder进一步探测具体服务。</p><p>基本用法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">--sV:指定让：Nmap进行版本侦测<br>--<span class="hljs-keyword">version</span>-ntensity<span class="hljs-symbol">&lt;level&gt;</span>:指定版本侦测强度(<span class="hljs-number">0</span>-<span class="hljs-number">9</span>)，默认为<span class="hljs-number">7</span>。数值越高，探测出的服务越准确，但是运行时间会比较长。<br>--<span class="hljs-keyword">version</span>-light:指定使用径录侦测方式(intensity <span class="hljs-number">2</span>)<br>--<span class="hljs-keyword">version</span>-<span class="hljs-keyword">all</span>:尝试使用所有的probes.进行侦测(intensity <span class="hljs-number">9</span>)<br>--<span class="hljs-keyword">version</span>-trace:显示出详细的版本侦测过程信息。<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -sv ip<br>#-sV（版本探测）  <br>#该参数可打开版本探测。也可以用-A同时打开操作系统探测和版本探测。<br></code></pre></td></tr></table></figure><h3 id="Ⅳ、OS侦测"><a href="#Ⅳ、OS侦测" class="headerlink" title="Ⅳ、OS侦测"></a>Ⅳ、OS侦测</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">nmap</span> <span class="hljs-built_in">--O</span> <span class="hljs-string">ip</span>                          <span class="hljs-comment">#进行OS的侦测</span><br></code></pre></td></tr></table></figure><h3 id="Ⅴ、漏洞扫描"><a href="#Ⅴ、漏洞扫描" class="headerlink" title="Ⅴ、漏洞扫描"></a>Ⅴ、漏洞扫描</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">nmap<span class="hljs-built_in"> ip </span><span class="hljs-attribute">--script</span>=auth,vuln   #一些常见的漏洞，专业可以使用AWVS<br></code></pre></td></tr></table></figure><h2 id="三、所有功能"><a href="#三、所有功能" class="headerlink" title="三、所有功能"></a>三、所有功能</h2><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>sT TCP connect()扫描，这种方式会在目标主机的日志中记录大批连接请求和错误信息。<br><span class="hljs-literal">-</span>sS 半开扫描，很少有系统能把它记入系统日志。不过，需要Root权限。<br><span class="hljs-literal">-</span>sF -sN 秘密FIN数据包扫描、Xmas Tree、Null扫描模式<br><span class="hljs-literal">-</span>sP ping扫描，Nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描。<br><span class="hljs-literal">-</span>sU UDP扫描，但UDP扫描是不可靠的<br><span class="hljs-literal">-</span>sA 这项高级的扫描方法通常用来穿过防火墙的规则集<br><span class="hljs-literal">-</span>sV 探测端口服务版本<br><span class="hljs-literal">-</span>Pn 扫描之前不需要用ping命令，有些防火墙禁止ping命令。可以使用此选项进行扫描<br><span class="hljs-literal">-</span>v 显示扫描过程，推荐使用<br><span class="hljs-literal">-</span>h 帮助选项，是最清楚的帮助文档<br><span class="hljs-literal">-</span>p 指定端口，如“1-65535、1433、135、22、80”等<br><span class="hljs-literal">-</span>O 启用远程操作系统检测，存在误报<br><span class="hljs-literal">-</span>A 全面系统检测、启用脚本检测、扫描等<br><span class="hljs-literal">-</span>oN/-oX/-oG 将报告写入文件，分别是正常、XML、grepable 三种格式<br><span class="hljs-literal">-</span>T4 针对TCP端口禁止动态扫描延迟超过10ms<br><span class="hljs-literal">-</span>iL 读取主机列表，例如，“-iL C:\ip.txt”<br>nmap –iflist : 查看本地主机的接口信息和路由信息<br><span class="hljs-literal">-</span>A ：选项用于使用进攻性方式扫描<br><span class="hljs-literal">-</span>T4： 指定扫描过程使用的时序，总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况较好的情况下推荐使用T4<br><span class="hljs-literal">-</span>oX test.xml： 将扫描结果生成 test.xml 文件，如果中断，则结果打不开<br><span class="hljs-literal">-</span>oA test.xml: 将扫描结果生成 test.xml 文件，中断后，结果也可保存<br><span class="hljs-literal">-</span>oG test.txt: 将扫描结果生成 test.txt 文件<br><span class="hljs-literal">-</span>sn : 只进行主机发现，不进行端口扫描<br><span class="hljs-literal">-</span>O : 指定Nmap进行系统版本扫描<br><span class="hljs-literal">-</span>sV: 指定让Nmap进行服务版本扫描<br><span class="hljs-literal">-</span>p : 扫描指定的端口<br><span class="hljs-literal">-</span>sS/sT/sA/sW/sM:指定使用 TCP SYN/Connect()/ACK/Window/Maimon scans的方式来对目标主机进行扫描<br><span class="hljs-literal">-</span>sU: 指定使用UDP扫描方式确定目标主机的UDP端口状况<br><span class="hljs-literal">-</span>script<br><span class="hljs-literal">-</span>sL: List Scan 列表扫描，仅将指定的目标的IP列举出来，不进行主机发现<br><span class="hljs-literal">-</span>sY/sZ: 使用SCTP INIT/COOKIE-ECHO来扫描SCTP协议端口的开放的情况<br><span class="hljs-literal">-</span>sO: 使用IP protocol 扫描确定目标机支持的协议类型<br><span class="hljs-literal">-</span>PO : 使用IP协议包探测对方主机是否开启<br><span class="hljs-literal">-</span>PE/PP/PM : 使用ICMP echo、 ICMP timestamp、ICMP netmask 请求包发现主机<br><span class="hljs-literal">-</span>PS/PA/PU/PY : 使用TCP SYN/TCP ACK或SCTP INIT/ECHO方式进行发现<br><span class="hljs-literal">-</span>sN/sF/sX: 指定使用TCP Null, FIN, and Xmas scans秘密扫描方式来协助探测对方的TCP端口状态<br><span class="hljs-literal">-</span>e eth0：指定使用eth0网卡进行探测<br><span class="hljs-literal">-</span>f : --mtu : 指定使用分片、指定数据包的 MTU.<br><span class="hljs-literal">-</span>b : 使用FTP bounce scan扫描方式<br><span class="hljs-literal">-</span>g： 指定发送的端口号<br><span class="hljs-literal">-</span>r: 不进行端口随机打乱的操作（如无该参数，nmap会将要扫描的端口以随机顺序方式扫描，以让nmap的扫描不易被对方防火墙测到）<br><span class="hljs-literal">-</span>v 表示显示冗余信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态<br><span class="hljs-literal">-</span>n : 表示不进行DNS解析；<br><span class="hljs-literal">-</span>D &lt;decoy1,decoy2[,ME],…&gt;: 用一组 IP 地址掩盖真实地址，其中 ME 填入自己的 IP 地址<br><span class="hljs-literal">-</span>R ：表示总是进行DNS解析。<br><span class="hljs-literal">-</span>F : 快速模式，仅扫描TOP 100的端口<br><span class="hljs-literal">-</span>S &lt;IP_Address&gt;: 伪装成其他 IP 地址<br>–ttl : 设置 time-to-live 时间<br>–badsum: 使用错误的 checksum 来发送数据包（正常情况下，该类数据包被抛弃，如果收到回复，说明回复来自防火墙或IDS/IPS）<br>–dns-servers : 指定DNS服务器<br>–system-dns : 指定使用系统的DNS服务器<br>–traceroute : 追踪每个路由节点<br>–scanflags : 定制TCP包的flags<br>–top-ports :扫描开放概率最高的number个端口<br>–port-ratio : 扫描指定频率以上的端口。与上述–top-ports类似，这里以概率作为参数<br>–version-trace: 显示出详细的版本侦测过程信息<br>–osscan-limit: 限制Nmap只对确定的主机的进行OS探测（至少需确知该主机分别有一个open和closed的端口）<br>–osscan-guess: 大胆猜测对方的主机的系统类型。由此准确性会下降不少，但会尽可能多为用户提供潜在的操作系统<br>–data-length : 填充随机数据让数据包长度达到 Num<br>–ip-options : 使用指定的 IP 选项来发送数据包<br>–spoof-mac &lt;mac address/prefix/vendor name&gt; : 伪装 MAC 地址<br>–version-intensity : 指定版本侦测强度（0-9），默认为7。数值越高，探测出的服务越准确，但是运行时间会比较长。<br>–version-light: 指定使用轻量侦测方式 (intensity 2)<br>–version-all: 尝试使用所有的probes进行侦测 (intensity 9)<br>–version-trace: 显示出详细的版本侦测过程信息<br><span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h1 id="Zenmap工具使用实例"><a href="#Zenmap工具使用实例" class="headerlink" title="Zenmap工具使用实例"></a>Zenmap工具使用实例</h1><p><strong>扫描单个主机</strong></p><p>Nmap输出信息：</p><p><strong>端口信息：</strong><br>可看到开放的端口及服务。</p><p><strong>主机明细：</strong><br>可看到操作系统信息。</p><p><strong>拓扑图：</strong><br>可看到访问的路径。</p><p><strong>主机明细：</strong><br>可看到操作系统信息、ip信息等。</p><p><strong>编辑自定义配置</strong><br>点击【配置】-【新的配置或命令】，在弹出框的上面一栏写自己需要的命令，下面【配置文件名】写入名字，描述栏可写相关的信息，点击保存即可。</p><h4 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h4><ul><li>Intense scan<br>(nmap -T4 -A -v)<br>一般来说，Intense scan可以满足一般扫描<br>-T4 加快执行速度<br>-A 操作系统及版本探测<br>-v 显示详细的输出</li><li>Intense scan plus UDP<br>(nmap -sS -sU -T4 -A -v)<br>即UDP扫描<br>-sS TCP SYN 扫描<br>-sU UDP 扫描</li><li>Intense scan,all TCP ports<br>(nmap -p 1-65536 -T4 -A -v)<br>扫描所有TCP端口，范围在1-65535，试图扫描所有端口的开放情况，速度比较慢。<br>-p 指定端口扫描范围</li><li>Intense scan,no ping<br>(nmap -T4 -A -v -Pn)<br>非ping扫描<br>-Pn 非ping扫描</li><li>Ping scan<br>(nmap -sn)<br>Ping 扫描<br>优点：速度快。<br>缺点：容易被防火墙屏蔽，导致无扫描结果<br>-sn ping扫描</li><li>Quick scan<br>(nmap -T4 -F)<br>快速的扫描<br>-F 快速模式。</li><li>Quick scan plus<br>(nmap -sV -T4 -O -F –version-light)<br>快速扫描加强模式<br>-sV 探测端口及版本服务信息。<br>-O 开启OS检测<br>–version-light 设定侦测等级为2。</li><li>Quick traceroute<br>(nmap -sn –traceroute)<br>路由跟踪<br>-sn Ping扫描，关闭端口扫描<br>-traceroute 显示本机到目标的路由跃点。</li><li>Regular scan<br>规则扫描</li><li>Slow comprehensive scan<br>(nmap -sS -sU -T4 -A -v -PE -PP -PS80,443,-PA3389,PU40125 -PY -g 53 –script all)<br>慢速全面扫描。</li></ul><h1 id="保存扫描结果"><a href="#保存扫描结果" class="headerlink" title="保存扫描结果"></a>保存扫描结果</h1><p>-oX test.xml： 将扫描结果生成 test.xml 文件，如果中断，则结果打不开<br>-oA test.xml: 将扫描结果生成 test.xml 文件，中断后，结果也可保存<br>-oG test.txt: 将扫描结果生成 test.txt 文件</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
